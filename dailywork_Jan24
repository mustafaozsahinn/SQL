SELECT YEAR(o.order_date) [year], s.staff_id, AVG(i.quantity) AS avg_of_years
FROM sale.orders o
JOIN sale.staff s ON o.staff_id = s.staff_id
JOIN sale.order_item i ON o.order_id = i.order_id
GROUP BY YEAR(o.order_date), s.staff_id

------

CREATE OR ALTER VIEW amount_of_product AS
SELECT p.brand_id, i.product_id, YEAR(o.order_date) as years, SUM(i.quantity) AS amount_of_product
FROM sale.order_item i
LEFT JOIN sale.orders o ON i.order_id = o.order_id
LEFT JOIN product.product p ON i.product_id = p.product_id
GROUP BY p.brand_id, i.product_id,o.order_date

WITH annual_product AS 
(
    SELECT brand_id, model_year, COUNT(product_id) as product_count
    FROM product.product
    GROUP BY brand_id, model_year
)
SELECT brand_id, model_year, product_count,
    SUM(product_count) OVER (PARTITION BY brand_id ORDER BY model_year) as annual_product_count
FROM annual_product
ORDER BY brand_id, model_year;

---------
SELECT city, COUNT(customer_id) AS num_of_cust
FROM sale.customer
WHERE state = 'CA'
GROUP BY city
HAVING COUNT(customer_id) > 5
ORDER BY num_of_cust DESC;

--------
SELECT customer_id, YEAR(order_date) AS years, COUNT(order_id) AS order_count
FROM sale.orders
GROUP BY customer_id, YEAR(order_date)
HAVING COUNT(order_id) > 1
ORDER BY customer_id

-------
SELECT o.order_id, SUM(quantity * list_price * (1-discount)) AS total_amount,
CASE 
    WHEN SUM(quantity * list_price * (1 - discount)) < 500 THEN 'very low'
    WHEN SUM(quantity * list_price * (1 - discount)) BETWEEN 500 AND 1000 THEN 'low'
    WHEN SUM(quantity * list_price * (1 - discount)) BETWEEN 1000 AND 5000 THEN 'medium'
    WHEN SUM(quantity * list_price * (1 - discount)) BETWEEN 5000 AND 10000 THEN 'high'
    WHEN SUM(quantity * list_price * (1 - discount)) > 10000 THEN 'very high'
    END as order_amount_category
FROM sale.orders o
JOIN sale.order_item i ON o.order_id = i.order_id
WHERE YEAR(order_date) = 2018
GROUP BY o.order_id
ORDER BY total_amount;


--------
SELECT *
FROM sale.customer
WHERE
    EXISTS (
        SELECT COUNT(*)
        FROM sale.orders o, sale.customer c
        WHERE o.customer_id = c.customer_id
        GROUP BY o.customer_id
        HAVING COUNT(o.customer_id) > 2
    )
ORDER BY first_name, last_name;